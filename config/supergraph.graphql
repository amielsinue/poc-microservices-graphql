schema
  @link(url: "https://specs.apollo.dev/link/v1.0")
  @link(url: "https://specs.apollo.dev/join/v0.2", for: EXECUTION)
{
  query: Query
  mutation: Mutation
}

directive @join__field(graph: join__Graph!, requires: join__FieldSet, provides: join__FieldSet, type: String, external: Boolean, override: String, usedOverridden: Boolean) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__implements(graph: join__Graph!, interface: String!) repeatable on OBJECT | INTERFACE

directive @join__type(graph: join__Graph!, key: join__FieldSet, extension: Boolean! = false, resolvable: Boolean! = true) repeatable on OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT | SCALAR

directive @link(url: String, as: String, for: link__Purpose, import: [link__Import]) repeatable on SCHEMA

scalar join__FieldSet

enum join__Graph {
  IDENTITIES @join__graph(name: "identities", url: "http://kong:8000/identities/graphql")
  PROFILES @join__graph(name: "profiles", url: "http://kong:8000/profiles/graphql")
}

scalar link__Import

enum link__Purpose {
  """
  `SECURITY` features provide metadata necessary to securely resolve fields.
  """
  SECURITY

  """
  `EXECUTION` features provide metadata necessary for operation execution.
  """
  EXECUTION
}

type Mutation
  @join__type(graph: IDENTITIES)
  @join__type(graph: PROFILES)
{
  createUser(username: String!, email: String!): User! @join__field(graph: IDENTITIES)
  createProfile(userId: Int!, bio: String, location: String): Profile! @join__field(graph: PROFILES)
}

type Profile
  @join__type(graph: PROFILES)
{
  id: Int!
  userId: Int!
  bio: String
  location: String
}

type Query
  @join__type(graph: IDENTITIES)
  @join__type(graph: PROFILES)
{
  user(id: Int!): User @join__field(graph: IDENTITIES)
  users: [User!]! @join__field(graph: IDENTITIES)
  profile(user_id: Int!): Profile @join__field(graph: PROFILES)
  profiles: [Profile!]! @join__field(graph: PROFILES)
}

type User
  @join__type(graph: IDENTITIES, key: "id")
  @join__type(graph: PROFILES, key: "id")
{
  id: Int!
  username: String! @join__field(graph: IDENTITIES)
  email: String! @join__field(graph: IDENTITIES)
  profile: Profile @join__field(graph: PROFILES)
}
